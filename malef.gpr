-------------------------------------------------------------------------------
--                                                                           --
--                             M A L E F . G P R                             --
--                                                                           --
--                                 M A L E F                                 --
--                                                                           --
--                                   G P R                                   --
--                                                                           --
-------------------------------------------------------------------------------
--     Copyright (c) 2020 José Antonio Verde Jiménez All Rights Reserved     --
-------------------------------------------------------------------------------
-- This file is part of Malef.                                               --
--                                                                           --
-- This program is free software:  you  can redistribute it and/or modify it --
-- under  the terms  of the  GNU  General License  as published by the  Free --
-- Software  Foundation,  either  version 3  of  the  License,  or  (at your --
-- opinion) any later version.                                               --
--                                                                           --
-- This  program  is distributed  in the  hope that  it will be  useful, but --
-- WITHOUT   ANY   WARRANTY;   without   even  the   implied   warranty   of --
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General --
-- Public License for more details.                                          --
--                                                                           --
-- You should have received  a copy of the  GNU General Public License along --
-- with this program. If not, see <https://www.gnu.org/licenses/>.           --
--                                                                           --
-------------------------------------------------------------------------------

project Malef is

   --====-====------------====-====--
   --====-====- EXTERNAL -====-====--
   --====-====------------====-====--
   
   type OS_Kind is ("linux", "windows", "windows-cmd", "nix");
   Operating_System : OS_Kind := External ("MALEF_OPERATING_SYSTEM",
                                           "linux");


   type Library_Type_Type is ("relocatable", "static", "static-pic");
   Library_Type : Library_Type_Type := External ("MALEF_LIBRARY_TYPE",
                                                 External ("LIBRARY_TYPE",
                                                           "relocatable"));

   type Enabled_Kind is ("enabled", "disabled");
   Compile_Checks   : Enabled_Kind := External ("MALEF_COMPILE_CHECKS",
                                                "enabled");
   Runtime_Checks   : Enabled_Kind := External ("MALEF_RUNTIME_CHECKS",
                                                "enabled");
   Style_Checks     : Enabled_Kind := External ("MALEF_STYLE_CHECKS",
                                                "enabled");
   Contracts_Checks : Enabled_Kind := External ("MALEF_CONTRACTS",
                                                "enabled");
   Alire_Built      : Enabled_Kind := External ("MALEF_ALIRE_BUILT",
                                                "disabled");

   type Build_Kind is ("debug", "optimize");
   Build_Mode : Build_Kind := External ("MALEF_BUILD_MODE", "debug");


   C_API_Compilation : Enabled_Kind := External ("MALEF_C_API_COMPILATION",
                                                 "enabled");



   --====-====-----------====-====--
   --====-====- PROJECT -====-====--
   --====-====-----------====-====--
   
   Ada_API := ("Malef",
               "Malef.Colors",
               "Malef.Events",
               "Malef.Exceptions",
               "Malef.Surfaces",
               "Malef.Systems",
               "Malef.Wrapper");

   C_API   := ("C_Malef",
               "C_Malef.Colors",
               "C_Malef.Errors",
               "C_Malef.Surfaces");

   API := Ada_API;

   Src_Dirs := ("ada-malef/src-base", "ada-malef/src-systems");

   case Operating_System is
      when "linux" =>
         Src_Dirs := Src_Dirs & ("ada-malef/src-systems/linux",
                                 "ada-malef/src-systems/shared/ansi");
      when "windows" =>
         Src_Dirs := Src_Dirs & ("ada-malef/src-systems/windows",
                                 "ada-malef/src-systems/shared/ansi");
      when "windows-cmd" =>
         Src_Dirs := Src_Dirs & ("ada-malef/src-systems/windows",
                                 "ada-malef/src-systems/shared/cmd");
      when others =>
         Src_Dirs := Src_Dirs & ("ada-malef/src-systems/linux",
                                 "ada-malef/src-systems/shared/ansi");
   end case;

   case C_API_Compilation is
      when "enabled" =>
         API := API & C_API;
         Src_Dirs := Src_Dirs & "c-malef/src-base";
      when others    => null;
   end case;

   Prefix := "";
   case Alire_Built is
      when "disabled" => Prefix := "alire/build/";
      when others     => Prefix := "";
   end case;
   
   for Library_Name       use "Malef";
   for Library_Kind       use Library_Type;
   for Library_Version    use "libMalef.so." & "0";
   for Library_Standalone use "standard";
   for Library_Interface  use API;
   for Library_Dir        use Prefix & "lib-" & Operating_System;

   for Languages           use ("Ada", "C");
   for Source_Dirs         use Src_Dirs;
   for Object_Dir          use Prefix & "obj-" & Operating_System ;
   for Create_Missing_Dirs use "True";



   --====-====------------====-====--
   --====-====- SWITCHES -====-====--
   --====-====------------====-====--

   Compile_Checks_Switches := ();
   case Compile_Checks is
      when "enabled" =>
         Compile_Checks_Switches :=
           ("-gnatwa",  -- All warnings
            "-gnatwM",  -- Remove the warning for assigned but not used.
            "-gnatwL",  -- Except elaboration warnings.
            "-gnatVa",  -- All validity checks
            "-gnatwe"); -- Warnings as errors
      when others => null;
   end case;

   Runtime_Checks_Switches := ();
   case Runtime_Checks is
      when "enabled" => null;
      when others =>
         Runtime_Checks_Switches :=
           ("-gnatp"); -- Supress checks
   end case;

   Style_Checks_Switches := ();
   case Style_Checks is
      when "enabled" =>
         Style_Checks_Switches :=
           ("-gnaty-d",  -- Disable no DOS line terminators
            "-gnatyO"    -- Overriding subprograms explicitly marked as such
           ); -- TODO: Finish this.
      when others => null;
   end case;

   Contracts_Switches := ();
   case Contracts_Checks is
      when "enabled" => null;
         Contracts_Switches :=
           ("-gnata"); --  Enable assertions and contracts
      when others =>
   end case;

   Build_Switches := ();
   case Build_Mode is
      when "optimize" =>
         Build_Switches :=
            ("-O3",     -- Optimization
             "-gnatn"); -- Enable inlining
      when "debug" =>
         Build_Switches :=
            ("-g",      -- Debug info
             "-Og",     -- No optimization
             "-gnatv",  -- Verbose mode. Full error output with source lines to
                        -- Standard Output.
             "-gnatf",  -- Full errors. Verbose details, all undefined
                        -- references.
             "-gnatd7"  -- Suppress timestamps
             );
   end case;


   Linker_Switches := ();
   case Build_Mode is
      when "debug" => Linker_Switches := ("-lgmem");
      when others  => null;
   end case;



   --====-====------------====-====--
   --====-====- PACKAGES -====-====--
   --====-====------------====-====--

   package Compiler is
      for Default_Switches ("Ada") use
        Compile_Checks_Switches &
        Build_Switches          &
        Runtime_Checks_Switches &
        Style_Checks_Switches   &
        Contracts_Switches      &
        ("-gnatQ");  -- Don't quit. Generate ALI and tree files even if
                     -- illegalities.
   end Compiler;


   package Binder is
      for Switches ("Ada") use ("-Es"); --  Symbolic traceback
   end Binder;


   package Documentation is
      -- To build the documentation:
      --    `gnatdoc -bplwPmalef --enable-build'
      for Documentation_Dir use Prefix & "docs";
   end Documentation;


   package Naming is
      -- The file names are in lower case.
      for Casing use "lowercase";

      -- This tells to replace the dashes `-' in names with dots when using dot
      -- notation, e.g:
      --    parent-child.adb -> Parent.Child
      for Dot_Replacement use "-";

      -- The specification files' extension is `.ads'.
      for Spec_Suffix ("Ada") use ".ads";

      -- The implementation files' extension is `.adb'.
      for Body_Suffix ("Ada") use ".adb";

      -- The suffix for separate units (subunits).
      for Separate_Suffix use ".separate.adb";
   end Naming;


end Malef;

---=======================-------------------------=========================---
--=======================-- E N D   O F   F I L E --=========================--
---=======================-------------------------=========================---
